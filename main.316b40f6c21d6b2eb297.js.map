{"version":3,"file":"main.316b40f6c21d6b2eb297.js","mappings":"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","sources":["webpack://battleship/./src/modules/models/ship-factory.ts","webpack://battleship/./src/modules/models/game-board.ts","webpack://battleship/./src/modules/models/player.ts","webpack://battleship/./src/modules/model.ts","webpack://battleship/./src/modules/controllers/opponent-controller.ts","webpack://battleship/./src/modules/controllers/player-controller.ts","webpack://battleship/./src/modules/controllers/start-controller.ts","webpack://battleship/./src/modules/views/start-view.ts","webpack://battleship/./src/modules/views/player-view.ts","webpack://battleship/./src/modules/views/opponent-view.ts","webpack://battleship/./src/modules/views/boards-view.ts","webpack://battleship/./src/index.ts","webpack://battleship/./src/modules/view.ts","webpack://battleship/./src/modules/controller.ts"],"sourcesContent":["export class Ship implements ShipKind {\n\tlength: number;\n\tdirection: Direction; // Ships are implemented top-down or left-right\n\thitList: boolean[];\n\n\tconstructor(newShip: ShipKind) {\n\t\tconst { length, direction } = newShip;\n\t\tthis.length = length;\n\t\tthis.direction = direction;\n\t\tthis.hitList = new Array(length).fill(false); // Creates a new array with all positions unhit.\n\t}\n\n\thit(hitNum: number) {\n\t\tthis.hitList[hitNum] = true;\n\t}\n\n\tisHit(hitNum: number): boolean {\n\t\treturn this.hitList[hitNum];\n\t}\n\tisSunk(): boolean {\n\t\tfor (const hitVal of this.hitList) {\n\t\t\tif (!hitVal) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\n// Class:    Ship\n//------------------------------------------\n// Methods:  hit(hitNum)\n//           isSunk()\n","import { Ship } from './ship-factory';\n\nexport class GameBoard implements GameBoardTemplate {\n\treadonly BattleshipCols = 10;\n\treadonly BattleshipRows = 10;\n\tshipCount: number;\n\tfinalBoard: (boolean | Ship)[][];\n\n\tconstructor() {\n\t\tthis.finalBoard = new Array(10)\n\t\t\t.fill(false)\n\t\t\t.map(() => Array(10).fill(false));\n\n\t\tthis.shipCount = 0;\n\t}\n\n\tprivate checkValidPlacement(\n\t\tx: number,\n\t\ty: number,\n\t\tdirection: Direction,\n\t\tlength: number\n\t): boolean {\n\t\tconst totalX = x + length;\n\t\tconst totalY = y + length;\n\n\t\tif (\n\t\t\t(direction === 1 &&\n\t\t\t\ttotalX <= this.BattleshipCols &&\n\t\t\t\ty < this.BattleshipRows) ||\n\t\t\t(direction === 2 &&\n\t\t\t\ttotalY <= this.BattleshipRows &&\n\t\t\t\tx < this.BattleshipCols)\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\ttraverseBoard(x: number, y: number, dir: Direction, length: number): number {\n\t\tlet hitIndex = 0;\n\t\tif (dir === 1) {\n\t\t\twhile (hitIndex <= length) {\n\t\t\t\tif (\n\t\t\t\t\tx - hitIndex < 0 ||\n\t\t\t\t\ttypeof this.finalBoard[x - hitIndex][y] === 'boolean'\n\t\t\t\t) {\n\t\t\t\t\treturn hitIndex - 1;\n\t\t\t\t}\n\t\t\t\thitIndex += 1;\n\t\t\t}\n\t\t} else if (dir === 2) {\n\t\t\twhile (hitIndex <= length) {\n\t\t\t\tif (\n\t\t\t\t\ty - hitIndex < 0 ||\n\t\t\t\t\ttypeof this.finalBoard[x][y - hitIndex] === 'boolean'\n\t\t\t\t) {\n\t\t\t\t\treturn hitIndex - 1;\n\t\t\t\t}\n\t\t\t\thitIndex += 1;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tcheckBoard(x: number, y: number): boolean | Ship {\n\t\treturn this.finalBoard[x][y];\n\t}\n\n\tcheckSpotHit(x: number, y: number): number {\n\t\tconst boardSpot = this.checkBoard(x, y) as Ship;\n\t\treturn this.traverseBoard(x, y, boardSpot.direction, boardSpot.length);\n\t}\n\n\tcheckSpotHitBool(x: number, y: number): boolean {\n\t\tconst spot = this.checkSpotHit(x, y);\n\t\treturn (this.checkBoard(x, y) as Ship).isHit(spot);\n\t}\n\n\tcheckAllSunk() {\n\t\tlet totalSunk = 0;\n\n\t\tfor (let i = 0; i < this.finalBoard[0].length; i++) {\n\t\t\tfor (let j = 0; j < this.finalBoard.length; j++) {\n\t\t\t\tconst boardSpot = this.checkBoard(i, j);\n\t\t\t\tif (\n\t\t\t\t\ttypeof boardSpot !== 'boolean' &&\n\t\t\t\t\tboardSpot.isSunk() &&\n\t\t\t\t\tthis.checkSpotHit(i, j) === 0\n\t\t\t\t) {\n\t\t\t\t\ttotalSunk += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn totalSunk === this.shipCount;\n\t}\n\n\tplaceShip(\n\t\tx: number,\n\t\ty: number,\n\t\tdirection: Direction,\n\t\tlength: number\n\t): boolean {\n\t\tconst newShip = new Ship({ length, direction });\n\n\t\tif (direction === 1 && this.checkValidPlacement(x, y, direction, length)) {\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\tthis.finalBoard[x + i][y] = newShip;\n\t\t\t}\n\t\t\tthis.shipCount += 1;\n\t\t} else if (\n\t\t\tdirection === 2 &&\n\t\t\tthis.checkValidPlacement(x, y, direction, length)\n\t\t) {\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\tthis.finalBoard[x][y + i] = newShip;\n\t\t\t}\n\t\t\tthis.shipCount += 1;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\treceiveAttack(x: number, y: number): boolean {\n\t\tif (x >= this.BattleshipCols || y >= this.BattleshipRows) {\n\t\t\treturn false;\n\t\t}\n\t\tconst boardSpot = this.checkBoard(x, y);\n\t\tif (typeof boardSpot !== 'boolean') {\n\t\t\tconst hitIndex = this.traverseBoard(\n\t\t\t\tx,\n\t\t\t\ty,\n\t\t\t\tboardSpot.direction,\n\t\t\t\tboardSpot.length\n\t\t\t);\n\t\t\tboardSpot.hit(hitIndex);\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthis.finalBoard[x][y] = true;\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\n// Class:    GameBoard\n//------------------------------------------\n// Methods:  checkBoard(x,y)\n//           checkAllSunk()\n//           placeShip(x,y,Direction,length)\n//           receiveAttack(x,y)\n","import { GameBoard } from './game-board';\n\nexport class Player implements PlayerInterface {\n\tname: string;\n\tisTurn: boolean;\n\tisWinner: boolean;\n\tcurrentBoard: GameBoard;\n\tconstructor(givenName: string, givenTurn: boolean, givenBoard: GameBoard) {\n\t\tthis.name = givenName;\n\t\tthis.isTurn = givenTurn;\n\t\tthis.currentBoard = givenBoard;\n\t\tthis.isWinner = false;\n\t}\n\n\t_toggleTurn(): void {\n\t\tthis.isTurn = !this.isTurn;\n\t}\n\n\thasLost(): boolean {\n\t\treturn this.currentBoard.checkAllSunk();\n\t}\n\n\twin(): void {\n\t\tthis.isWinner = true;\n\t}\n\treceiveAttack(x: number, y: number): boolean {\n\t\tconst success = this.currentBoard.receiveAttack(x, y);\n\t\tthis._toggleTurn();\n\n\t\treturn success;\n\t}\n\n\tattackPlayer(opponent: Player, x: number, y: number): boolean {\n\t\treturn opponent.receiveAttack(x, y);\n\t}\n}\n\nexport class BattleshipAI extends Player {\n\tmoveList: Set<[number, number]>;\n\tplaceList: Set<[number, number]>;\n\tconstructor(givenBoard: GameBoard) {\n\t\tsuper('Robot', false, givenBoard);\n\t\tthis.moveList = new Set();\n\t\tthis.placeList = new Set();\n\t}\n\n\tprivate getRandInt() {\n\t\treturn Math.floor(Math.random() * 10);\n\t}\n\tprivate checkMove(x: number, y: number): boolean {\n\t\tif (this.moveList.has([x, y])) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.moveList.add([x, y]);\n\t\treturn true;\n\t}\n\n\tprivate checkShip(x: number, y: number, dir: Direction, length: number) {\n\t\tif (dir === 2 && y + length < this.currentBoard.BattleshipRows) {\n\t\t\tfor (let i = y; i < y + length; i++) {\n\t\t\t\tif (\n\t\t\t\t\ttypeof this.currentBoard.checkBoard(x, i) !== 'boolean' ||\n\t\t\t\t\tthis.placeList.has([x, i])\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let i = y; i < y + length; i++) {\n\t\t\t\tthis.placeList.add([x, i]);\n\t\t\t}\n\t\t} else if (dir === 1 && x + length < this.currentBoard.BattleshipCols) {\n\t\t\tfor (let i = x; i < x + length; i++) {\n\t\t\t\tif (\n\t\t\t\t\ttypeof this.currentBoard.checkBoard(i, y) !== 'boolean' ||\n\t\t\t\t\tthis.placeList.has([i, y])\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let i = x; i < x + length; i++) {\n\t\t\t\tthis.placeList.add([i, y]);\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate getValidShip(length: number): [Direction, number, number] {\n\t\tconst newShipDirection: Direction = Math.floor(Math.random() * 2) + 1;\n\t\tlet x = this.getRandInt();\n\t\tlet y = this.getRandInt();\n\t\tlet validInput = this.checkShip(x, y, newShipDirection, length);\n\t\twhile (!validInput) {\n\t\t\tx = this.getRandInt();\n\t\t\ty = this.getRandInt();\n\t\t\tvalidInput = this.checkShip(x, y, newShipDirection, length);\n\t\t}\n\n\t\treturn [newShipDirection, x, y];\n\t}\n\n\tplaceShip(length: number): boolean {\n\t\tconst [newShipDirection, x, y] = this.getValidShip(length);\n\n\t\treturn this.currentBoard.placeShip(x, y, newShipDirection, length);\n\t}\n\n\tattackPlayer(opponent: Player): boolean {\n\t\tlet [x, y] = [this.getRandInt(), this.getRandInt()];\n\t\tlet validMove = this.checkMove(x, y);\n\n\t\twhile (!validMove) {\n\t\t\t[x, y] = [this.getRandInt(), this.getRandInt()];\n\t\t\tvalidMove = this.checkMove(x, y);\n\t\t}\n\t\treturn super.attackPlayer(opponent, x, y);\n\t}\n}\n","import { GameBoard } from './models/game-board';\nimport { BattleshipAI, Player } from './models/player';\n\nexport class Model implements BattleshipGame {\n\tplayerOne: Player;\n\tplayerTwo: BattleshipAI;\n\tprivate playerOneBoard: GameBoard;\n\tprivate playerTwoBoard: GameBoard;\n\tobservers: ViewType[];\n\tstage: Stage;\n\tconstructor() {\n\t\tthis.playerOneBoard = new GameBoard();\n\t\tthis.playerTwoBoard = new GameBoard();\n\t\tthis.playerOne = new Player('', true, this.playerOneBoard);\n\t\tthis.playerTwo = new BattleshipAI(this.playerTwoBoard);\n\t\tthis.observers = [];\n\t\tthis.stage = 1;\n\t}\n\n\taddObservers(newViews: ViewType[]) {\n\t\tthis.observers = newViews;\n\t}\n\n\tupdateObservers() {\n\t\tfor (const observer of this.observers) {\n\t\t\tobserver.updateView(this);\n\t\t}\n\t}\n\n\tupdateObserver(observer: ViewType) {\n\t\tobserver.updateView(this);\n\t}\n\n\tyourTurn() {\n\t\treturn this.playerOne.isTurn;\n\t}\n\n\tsetName(givenName: string) {\n\t\tthis.playerOne.name = givenName;\n\t}\n\n\tyourSetup(x: number, y: number, dir: Direction, length: number) {\n\t\tthis.playerOne.currentBoard.placeShip(x, y, dir, length);\n\t}\n\n\tcheckWin(): number {\n\t\tif (this.playerTwo.hasLost()) {\n\t\t\treturn 1;\n\t\t} else if (this.playerOne.hasLost()) {\n\t\t\treturn 2;\n\t\t}\n\t\treturn 0;\n\t}\n\n\trobotSetup() {\n\t\tthis.playerTwo.placeShip(2);\n\t\tthis.playerTwo.placeShip(3);\n\t\tthis.playerTwo.placeShip(3);\n\t\tthis.playerTwo.placeShip(4);\n\t\tthis.playerTwo.placeShip(5);\n\t}\n\n\tyourPlay(x: number, y: number) {\n\t\tthis.playerOne.attackPlayer(this.playerTwo, x, y);\n\t}\n\n\trobotPlay() {\n\t\tthis.playerTwo.attackPlayer(this.playerOne);\n\t}\n\n\tplayerBoard() {\n\t\treturn this.playerOne.currentBoard;\n\t}\n\n\tenemyBoard() {\n\t\treturn this.playerTwo.currentBoard;\n\t}\n\n\treset() {\n\t\tthis.playerOneBoard = new GameBoard();\n\t\tthis.playerTwoBoard = new GameBoard();\n\t\tthis.playerOne = new Player('', true, this.playerOneBoard);\n\t\tthis.playerTwo = new BattleshipAI(this.playerTwoBoard);\n\t\tthis.stage = 1;\n\t\tthis.robotSetup();\n\t\tthis.updateObservers();\n\t}\n}\n","export class OpponentController implements ControllerType {\n\tmodel: BattleshipGame;\n\tconstructor(givenModel: BattleshipGame) {\n\t\tthis.model = givenModel;\n\t\tthis.model.robotSetup();\n\t}\n\n\tgetAttacked(x: number, y: number) {\n\t\tthis.model.yourPlay(x, y);\n\t\tconsole.log(this.model.checkWin(), 'winner');\n\n\t\tif (this.model.checkWin() === 1) {\n\t\t\tthis.model.stage = 4;\n\t\t\tthis.model.updateObservers();\n\t\t\treturn;\n\t\t}\n\t\tthis.model.robotPlay();\n\t\tif (this.model.checkWin() === 2) {\n\t\t\tthis.model.stage = 4;\n\t\t}\n\n\t\tthis.model.updateObservers();\n\t}\n}\n","export class PlayerController implements ControllerType {\n\tmodel: BattleshipGame;\n\tconstructor(givenModel: BattleshipGame) {\n\t\tthis.model = givenModel;\n\t}\n\n\tplaceShip(x: number, y: number, dir: Direction, length: number) {\n\t\tthis.model.yourSetup(x, y, dir, length);\n\t\tthis.model.updateObservers();\n\t}\n}\n","export class StartController implements ControllerType {\n\tmodel;\n\tconstructor(givenModel: BattleshipGame) {\n\t\tthis.model = givenModel;\n\t}\n\n\tstartGame(userName: string) {\n\t\tlet assignedName = userName;\n\t\tif (userName == null || userName === '') {\n\t\t\tassignedName = 'Player';\n\t\t}\n\t\tconsole.log(assignedName);\n\t\tthis.model.setName(assignedName);\n\t\tthis.model.stage = 2;\n\t\tthis.model.updateObservers();\n\t}\n}\n","import { StartController } from '../controllers/start-controller';\n\nexport class StartView implements ViewType {\n\tcontroller: StartController;\n\tgameStart: boolean;\n\n\tconstructor(givenController: StartController) {\n\t\tthis.controller = givenController;\n\t}\n\n\tremoveView() {\n\t\tconst currView = document.getElementById('start-screen');\n\t\tcurrView?.remove();\n\t}\n\n\tstartGame(e: Event) {\n\t\te.preventDefault();\n\t\tconst newForm = e.target as HTMLFormElement;\n\t\tconst givenName = newForm.form[0].value;\n\n\t\tif (givenName != null) {\n\t\t\tthis.removeView();\n\t\t\tthis.controller.startGame(givenName);\n\t\t}\n\t}\n\n\tbuildView() {\n\t\t// <div class='start-screen'>\n\t\t// \t<h1>Battleship</h1>\n\t\t// \t<form action='#' id='username'>\n\t\t// \t\t<input\n\t\t// \t\t\ttype='text'\n\t\t// \t\t\tname='player-name'\n\t\t// \t\t\tid='player-name'\n\t\t// \t\t\tmaxlength='14'\n\t\t// \t\t\tplaceholder='Your Name'\n\t\t// \t\t/>\n\t\t// \t\t<input type='submit' value='Start' id='start-game-button' />\n\t\t// \t</form>\n\t\t// </div>;\n\n\t\tconst mainDiv = document.getElementById('game-container');\n\t\tmainDiv?.remove();\n\n\t\tconst newMain = document.createElement('div');\n\t\tnewMain.id = 'game-container';\n\n\t\tconst addFragment = document.createDocumentFragment();\n\n\t\tconst startScreen = document.createElement('div');\n\t\tstartScreen.id = 'start-screen';\n\n\t\tconst headerName = document.createElement('h1');\n\t\theaderName.textContent = 'Battleship';\n\n\t\tconst startForm = document.createElement('form');\n\t\tstartForm.id = 'username';\n\t\tstartForm.action = '#';\n\n\t\tconst nameInput = document.createElement('input');\n\t\tnameInput.type = 'text';\n\t\tnameInput.name = 'player-name';\n\t\tnameInput.id = 'player-name';\n\t\tnameInput.maxLength = 14;\n\t\tnameInput.placeholder = 'Your Name';\n\n\t\tconst submitButton = document.createElement('input');\n\t\tsubmitButton.type = 'submit';\n\t\tsubmitButton.value = 'Start';\n\t\tsubmitButton.id = 'start-game-button';\n\t\tsubmitButton.addEventListener('click', this.startGame.bind(this));\n\n\t\tstartForm.appendChild(nameInput);\n\t\tstartForm.appendChild(submitButton);\n\n\t\tstartScreen.appendChild(headerName);\n\t\tstartScreen.appendChild(startForm);\n\n\t\taddFragment.appendChild(startScreen);\n\n\t\tnewMain.appendChild(addFragment);\n\t\tdocument.body.appendChild(newMain);\n\t}\n\n\tupdateView(model: BattleshipGame) {\n\t\tif (model.stage === 1) {\n\t\t\tthis.buildView();\n\t\t}\n\t}\n}\n","// Three stages : Starting is Stage 1\n// Stage 2 is Placing: Player will be able to place their own ships onto the board : their own board is modifiable\n// Stage 3 is Playing: Player will be able to attack the enemy board : their own board is view-only, enemy board is modifiable\n\ninterface newShip extends ShipKind {\n\tisSunk(): boolean;\n}\n\ninterface PlayControl extends ControllerType {\n\tplaceShip(x: number, y: number, dir: Direction, length: number): void;\n}\n// player UI, shows everything\nexport class PlayerView implements ViewType {\n\tcontroller: PlayControl;\n\tcurDirection: Direction;\n\ttotalShipLength: number;\n\tcurShipLength: number;\n\tconstructor(givenController: PlayControl) {\n\t\tthis.controller = givenController;\n\t\tthis.curDirection = 1; //horizontal\n\t\tthis.totalShipLength = 0;\n\t}\n\n\t// Your Own Ships will always be visible to you, so they will be either missed color or hit/sunk color\n\n\tgetNextShipSize() {\n\t\tswitch (this.totalShipLength) {\n\t\t\tcase 0:\n\t\t\t\treturn 2;\n\t\t\tcase 2:\n\t\t\t\treturn 3;\n\t\t\tcase 5:\n\t\t\t\treturn 3;\n\t\t\tcase 8:\n\t\t\t\treturn 4;\n\t\t\tcase 12:\n\t\t\t\treturn 5;\n\t\t\tdefault:\n\t\t\t\treturn 0;\n\t\t}\n\t}\n\n\thandleMoves(e: Event) {\n\t\tswitch (this.totalShipLength) {\n\t\t\tcase 0:\n\t\t\t\tthis.curShipLength = 2;\n\t\t\t\tthis.totalShipLength += 2;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tthis.curShipLength = 3;\n\t\t\t\tthis.totalShipLength += 3;\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tthis.totalShipLength += 3;\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\tthis.curShipLength = 4;\n\t\t\t\tthis.totalShipLength += 4;\n\t\t\t\tbreak;\n\t\t\tcase 12:\n\t\t\t\tthis.curShipLength = 5;\n\t\t\t\tthis.totalShipLength += 5;\n\t\t\t\tthis.controller.model.stage = 3;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\t\tconst newTarget = e.target as HTMLDivElement;\n\t\tconst identity = newTarget.id;\n\t\tconst idArray = identity.split('-');\n\t\tconst parsedID = parseInt(idArray[1]);\n\t\tconst parsedX = parsedID % 10;\n\t\tconst parsedY = Math.floor(parsedID / 10);\n\n\t\tif (\n\t\t\t(this.curDirection === 1 && parsedX + this.curShipLength <= 10) ||\n\t\t\t(this.curDirection === 2 && parsedY + this.curShipLength <= 10)\n\t\t) {\n\t\t\tthis.controller.placeShip(\n\t\t\t\tparsedX,\n\t\t\t\tparsedY,\n\t\t\t\tthis.curDirection,\n\t\t\t\tthis.curShipLength\n\t\t\t);\n\t\t} else if (this.curDirection === 1 && parsedX - this.curShipLength >= 0) {\n\t\t\tthis.controller.placeShip(\n\t\t\t\tparsedX - this.curShipLength + 1,\n\t\t\t\tparsedY,\n\t\t\t\tthis.curDirection,\n\t\t\t\tthis.curShipLength\n\t\t\t);\n\t\t} else if (this.curDirection === 2 && parsedY - this.curShipLength >= 0) {\n\t\t\tthis.controller.placeShip(\n\t\t\t\tparsedX,\n\t\t\t\tparsedY - this.curShipLength + 1,\n\t\t\t\tthis.curDirection,\n\t\t\t\tthis.curShipLength\n\t\t\t);\n\t\t}\n\t}\n\n\taddPreview(e: Event) {\n\t\tconsole.log('hovered');\n\n\t\tconst newTarget = e.target as HTMLDivElement;\n\t\tconst identity = newTarget.id;\n\t\tconst idArray = identity.split('-');\n\t\tconst parsedID = parseInt(idArray[1]);\n\t\tconst parsedX = parsedID % 10;\n\t\tconst parsedY = Math.floor(parsedID / 10);\n\t\tconst nextSize = this.getNextShipSize();\n\n\t\tif (this.curDirection === 1 && parsedX + nextSize <= 10) {\n\t\t\tfor (let i = parsedX; i < parsedX + nextSize; i++) {\n\t\t\t\tconst nextShipCell = document.getElementById(\n\t\t\t\t\t`player-${parsedY * 10 + i}`\n\t\t\t\t);\n\t\t\t\tnextShipCell?.classList.add('preview');\n\t\t\t}\n\t\t} else if (this.curDirection === 2 && parsedY + nextSize <= 10) {\n\t\t\tfor (let i = parsedY; i < parsedY + nextSize; i++) {\n\t\t\t\tconst nextShipCell = document.getElementById(\n\t\t\t\t\t`player-${i * 10 + parsedX}`\n\t\t\t\t);\n\t\t\t\tnextShipCell?.classList.add('preview');\n\t\t\t}\n\t\t} else if (this.curDirection === 1 && parsedX - nextSize >= 0) {\n\t\t\tfor (let i = parsedX - nextSize + 1; i <= parsedX; i++) {\n\t\t\t\tconst nextShipCell = document.getElementById(\n\t\t\t\t\t`player-${parsedY * 10 + i}`\n\t\t\t\t);\n\t\t\t\tnextShipCell?.classList.add('preview');\n\t\t\t}\n\t\t} else if (this.curDirection === 2 && parsedY - nextSize >= 0) {\n\t\t\tfor (let i = parsedY - nextSize + 1; i <= parsedY; i++) {\n\t\t\t\tconst nextShipCell = document.getElementById(\n\t\t\t\t\t`player-${i * 10 + parsedX}`\n\t\t\t\t);\n\t\t\t\tnextShipCell?.classList.add('preview');\n\t\t\t}\n\t\t}\n\t}\n\n\tremovePreview() {\n\t\tconst previews = document.querySelectorAll('.preview');\n\t\tpreviews.forEach((prev) => {\n\t\t\tprev.classList.remove('preview');\n\t\t});\n\t}\n\n\tswitchDirection() {\n\t\tif (this.curDirection === 1) {\n\t\t\tthis.curDirection = 2;\n\t\t} else {\n\t\t\tthis.curDirection = 1;\n\t\t}\n\t}\n\n\tbuildView(model: BattleshipGame) {\n\t\tconst alreadyExisting = document.getElementById('player-side');\n\t\tif (alreadyExisting) {\n\t\t\talreadyExisting.remove();\n\t\t}\n\n\t\tconst opModel = model.playerBoard().finalBoard;\n\n\t\tconst gameBoard = document.querySelector('.dual-board');\n\n\t\tconst newBoardFragment = document.createDocumentFragment();\n\n\t\tconst newBoard = document.createElement('div');\n\t\tnewBoard.id = 'player-side';\n\n\t\tconst cellBoard = document.createElement('div');\n\t\tcellBoard.className = 'game-board';\n\t\tfor (let y = 0; y < model.playerBoard().BattleshipRows; y++) {\n\t\t\tfor (let x = 0; x < model.playerBoard().BattleshipCols; x++) {\n\t\t\t\tconst emptySpace = document.createElement('p');\n\t\t\t\temptySpace.classList.add('cell');\n\t\t\t\temptySpace.id = `player-${y * 10 + x}`;\n\n\t\t\t\tif (typeof opModel[x][y] === 'boolean' && opModel[x][y] === false) {\n\t\t\t\t\temptySpace.classList.add('unhit-cell');\n\n\t\t\t\t\tif (model.stage === 2) {\n\t\t\t\t\t\temptySpace.addEventListener(\n\t\t\t\t\t\t\t'mouseover',\n\t\t\t\t\t\t\tthis.addPreview.bind(this)\n\t\t\t\t\t\t);\n\t\t\t\t\t\temptySpace.addEventListener(\n\t\t\t\t\t\t\t'mouseout',\n\t\t\t\t\t\t\tthis.removePreview.bind(this)\n\t\t\t\t\t\t);\n\t\t\t\t\t\temptySpace.addEventListener('click', this.handleMoves.bind(this));\n\t\t\t\t\t}\n\t\t\t\t} else if (\n\t\t\t\t\ttypeof opModel[x][y] === 'boolean' &&\n\t\t\t\t\topModel[x][y] === true\n\t\t\t\t) {\n\t\t\t\t\temptySpace.classList.add('missed-cell');\n\t\t\t\t} else if (!model.playerBoard().checkSpotHitBool(x, y)) {\n\t\t\t\t\temptySpace.classList.add('hit-cell');\n\t\t\t\t} else if ((model.playerBoard().checkBoard(x, y) as newShip).isSunk()) {\n\t\t\t\t\temptySpace.classList.add('hit-cell');\n\t\t\t\t\temptySpace.textContent = 'X';\n\t\t\t\t} else {\n\t\t\t\t\temptySpace.classList.add('hit-cell');\n\t\t\t\t\temptySpace.textContent = '-';\n\t\t\t\t}\n\n\t\t\t\tcellBoard.appendChild(emptySpace);\n\t\t\t}\n\t\t\tdocument.addEventListener('keyup', (e) => {\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t\te.stopImmediatePropagation();\n\t\t\t\tconsole.log(e.code);\n\n\t\t\t\tif (e.code === 'Space') {\n\t\t\t\t\tthis.switchDirection();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tconst playerNameHeader = document.createElement('h1');\n\t\tplayerNameHeader.className = 'player-name';\n\t\tif (model.stage === 2) {\n\t\t\tplayerNameHeader.textContent = `Place your ships: Length ${this.getNextShipSize()}`;\n\t\t} else {\n\t\t\tplayerNameHeader.textContent = model.playerOne.name;\n\t\t}\n\n\t\tnewBoard.appendChild(cellBoard);\n\t\tnewBoard.appendChild(playerNameHeader);\n\t\tnewBoardFragment.appendChild(newBoard);\n\n\t\tgameBoard?.appendChild(newBoardFragment);\n\t}\n\tupdateView(model: BattleshipGame) {\n\t\tif (model.stage === 2) {\n\t\t\tif (this.totalShipLength === 17) {\n\t\t\t\tthis.curDirection = 1;\n\t\t\t\tthis.totalShipLength = 0;\n\t\t\t}\n\t\t}\n\t\tif (model.stage !== 1) {\n\t\t\tthis.buildView(model);\n\t\t}\n\t}\n}\n","// add Robot AI view\n\n// if turn, don't need to reveal unless hit\n\ninterface OpponentControl extends ControllerType {\n\tgetAttacked(x: number, y: number): void;\n}\ninterface newShip extends ShipKind {\n\tisSunk(): boolean;\n}\nexport class OpponentView implements ViewType {\n\tcontroller;\n\tconstructor(givenController: OpponentControl) {\n\t\tthis.controller = givenController;\n\t}\n\n\thandleMoves(e: Event) {\n\t\tconst identity = (e.target as HTMLDivElement).id;\n\t\tconst idArray = identity.split('-');\n\t\tconst parsedID = parseInt(idArray[1]);\n\t\tconst parsedX = parsedID % 10;\n\t\tconst parsedY = Math.floor(parsedID / 10);\n\t\tthis.controller.getAttacked(parsedX, parsedY);\n\t}\n\n\tbuildView(model: BattleshipGame) {\n\t\tconst alreadyExisting = document.getElementById('opponent-side');\n\t\tif (alreadyExisting) {\n\t\t\talreadyExisting.remove();\n\t\t}\n\n\t\tconst opModel = model.enemyBoard().finalBoard;\n\n\t\tconst gameBoard = document.querySelector('.dual-board');\n\n\t\tconst newBoardFragment = document.createDocumentFragment();\n\n\t\tconst newBoard = document.createElement('div');\n\t\tnewBoard.id = 'opponent-side';\n\n\t\tconst cellBoard = document.createElement('div');\n\t\tcellBoard.className = 'game-board';\n\t\tfor (let y = 0; y < model.enemyBoard().BattleshipRows; y++) {\n\t\t\tfor (let x = 0; x < model.enemyBoard().BattleshipCols; x++) {\n\t\t\t\tconst emptySpace = document.createElement('p');\n\t\t\t\temptySpace.classList.add('cell');\n\t\t\t\temptySpace.id = `enemy-${y * 10 + x}`;\n\n\t\t\t\tif (typeof opModel[x][y] === 'boolean' && opModel[x][y] === false) {\n\t\t\t\t\temptySpace.classList.add('unhit-cell');\n\t\t\t\t\tif (model.stage === 3) {\n\t\t\t\t\t\temptySpace.addEventListener('click', this.handleMoves.bind(this));\n\t\t\t\t\t}\n\t\t\t\t} else if (\n\t\t\t\t\ttypeof opModel[x][y] === 'boolean' &&\n\t\t\t\t\topModel[x][y] === true\n\t\t\t\t) {\n\t\t\t\t\temptySpace.classList.add('missed-cell');\n\t\t\t\t} else if (!model.enemyBoard().checkSpotHitBool(x, y)) {\n\t\t\t\t\tif (model.stage === 3) {\n\t\t\t\t\t\temptySpace.addEventListener('click', this.handleMoves.bind(this));\n\t\t\t\t\t}\n\n\t\t\t\t\temptySpace.classList.add('unhit-cell');\n\t\t\t\t} else if ((model.enemyBoard().checkBoard(x, y) as newShip).isSunk()) {\n\t\t\t\t\temptySpace.classList.add('hit-cell');\n\t\t\t\t\temptySpace.textContent = 'X';\n\t\t\t\t} else {\n\t\t\t\t\temptySpace.classList.add('hit-cell');\n\t\t\t\t\temptySpace.textContent = '-';\n\t\t\t\t}\n\n\t\t\t\tcellBoard.appendChild(emptySpace);\n\t\t\t}\n\t\t}\n\t\tconst playerNameHeader = document.createElement('h1');\n\t\tplayerNameHeader.className = 'player-name';\n\t\tplayerNameHeader.textContent = model.playerTwo.name;\n\n\t\tnewBoard.appendChild(cellBoard);\n\t\tnewBoard.appendChild(playerNameHeader);\n\t\tnewBoardFragment.appendChild(newBoard);\n\n\t\tgameBoard?.appendChild(newBoardFragment);\n\n\t\t// we are generating dom elements for the opponent right now lol\n\t}\n\n\t// opponent ships cannot be seen UNLESS they are hit...\n\t// SO THEREFORE, they are either Red, Missed, or White\n\n\t//buildView() {}\n\t// <div class=\"dual-board\">\n\t// \t<div id=\"player-side\">\n\t// \t\t<div class=\"gameboard\">\n\t// \t\t\t.cell#player-$*100\n\t// \t\t</div>\n\t// \t\t<h1 class=\"player-name\">Jonathan</h1>\n\t// \t</div>\n\t// \t<div id=\"opponent-side\">\n\t// \t\t<div class=\"gameboard\">\n\t// \t\t\t.cell#enemy-$*100\n\t// \t\t</div>\n\t// \t\t<h1 class=\"player-name\">Wilbur</h1>\n\t// \t</div>\n\t// </div>\n\n\tupdateView(model: BattleshipGame) {\n\t\tif (model.stage !== 1) {\n\t\t\tthis.buildView(model);\n\t\t}\n\t}\n}\n","export class BoardView {\n\tbuildView(model: BattleshipGame) {\n\t\tconst dualBoard = document.querySelector('.dual-board');\n\t\tif (dualBoard) {\n\t\t\tdualBoard.remove();\n\t\t}\n\n\t\tconst originalDocument = document.getElementById('game-container');\n\t\tif (model.stage === 4) {\n\t\t\tconsole.log('winner!!');\n\t\t\tconst newDiv = document.createElement('div');\n\t\t\tnewDiv.className = 'restart';\n\t\t\tconst restartButton = document.createElement('button');\n\t\t\tconst winnerTitle = document.createElement('h1');\n\t\t\tif (model.checkWin() === 1) {\n\t\t\t\twinnerTitle.textContent = `The winner is ${model.playerOne.name}!`;\n\t\t\t} else {\n\t\t\t\twinnerTitle.textContent = `The winner is Robot!`;\n\t\t\t}\n\t\t\trestartButton.addEventListener('click', model.reset.bind(model));\n\t\t\trestartButton.textContent = 'Restart';\n\t\t\tnewDiv.appendChild(winnerTitle);\n\t\t\tnewDiv.appendChild(restartButton);\n\t\t\toriginalDocument?.appendChild(newDiv);\n\t\t}\n\t\tconst boardView = document.createElement('div');\n\t\tboardView.className = 'dual-board';\n\t\toriginalDocument?.appendChild(boardView);\n\t}\n\n\tupdateView(model: BattleshipGame) {\n\t\tif (model.stage !== 1) {\n\t\t\tthis.buildView(model);\n\t\t}\n\t}\n}\n","import { Model } from './modules/model';\nimport { Controller } from './modules/controller';\nimport { View } from './modules/view';\nimport './style.scss';\n\nconst main = () => {\n\tconst model = new Model();\n\tconst controller = new Controller(model);\n\tnew View(controller);\n};\n\nmain();\n","import { StartView } from './views/start-view';\nimport { PlayerView } from './views/player-view';\nimport { OpponentView } from './views/opponent-view';\nimport { Controller } from './controller';\nimport { BoardView } from './views/boards-view';\n\nexport class View {\n\tcontroller;\n\tmodel;\n\tstartView;\n\tplayerView;\n\topponentView;\n\tboardView: ViewType;\n\n\tconstructor(givenController: Controller) {\n\t\tthis.controller = givenController;\n\t\tthis.model = this.controller.model;\n\t\tthis.startView = new StartView(this.controller.startController);\n\t\tthis.playerView = new PlayerView(this.controller.playerController);\n\t\tthis.opponentView = new OpponentView(this.controller.opponentController);\n\t\tthis.boardView = new BoardView();\n\t\tthis.model.addObservers([\n\t\t\tthis.startView,\n\t\t\tthis.boardView,\n\t\t\tthis.playerView,\n\t\t\tthis.opponentView,\n\t\t]);\n\t\tthis.model.updateObservers();\n\t}\n}\n","import { OpponentController } from './controllers/opponent-controller';\nimport { PlayerController } from './controllers/player-controller';\nimport { StartController } from './controllers/start-controller';\nimport { Model } from './model';\n\nexport class Controller {\n\tmodel;\n\tstartController;\n\tplayerController;\n\topponentController;\n\n\tconstructor(givenModel: Model) {\n\t\tthis.model = givenModel;\n\t\tthis.startController = new StartController(this.model);\n\t\tthis.playerController = new PlayerController(this.model);\n\t\tthis.opponentController = new OpponentController(this.model);\n\t}\n}\n"],"names":["newShip","length","direction","this","hitList","Array","fill","hit","hitNum","isHit","isSunk","BattleshipCols","BattleshipRows","finalBoard","map","shipCount","checkValidPlacement","x","y","totalY","traverseBoard","dir","hitIndex","checkBoard","checkSpotHit","boardSpot","checkSpotHitBool","spot","checkAllSunk","totalSunk","i","j","placeShip","Ship","receiveAttack","givenName","givenTurn","givenBoard","name","isTurn","currentBoard","isWinner","_toggleTurn","hasLost","win","success","attackPlayer","opponent","moveList","Set","placeList","getRandInt","Math","floor","random","checkMove","has","add","checkShip","getValidShip","newShipDirection","validInput","validMove","Player","playerOneBoard","GameBoard","playerTwoBoard","playerOne","playerTwo","BattleshipAI","observers","stage","addObservers","newViews","updateObservers","updateView","updateObserver","observer","yourTurn","setName","yourSetup","checkWin","robotSetup","yourPlay","robotPlay","playerBoard","enemyBoard","reset","givenModel","model","getAttacked","console","log","startGame","userName","assignedName","givenController","controller","removeView","currView","document","getElementById","remove","e","preventDefault","target","form","value","buildView","mainDiv","newMain","createElement","id","addFragment","createDocumentFragment","startScreen","headerName","textContent","startForm","action","nameInput","type","maxLength","placeholder","submitButton","addEventListener","bind","appendChild","body","curDirection","totalShipLength","getNextShipSize","handleMoves","curShipLength","idArray","split","parsedID","parseInt","parsedX","parsedY","addPreview","nextSize","nextShipCell","classList","removePreview","querySelectorAll","forEach","prev","switchDirection","alreadyExisting","opModel","gameBoard","querySelector","newBoardFragment","newBoard","cellBoard","className","emptySpace","stopPropagation","stopImmediatePropagation","code","playerNameHeader","dualBoard","originalDocument","newDiv","restartButton","winnerTitle","boardView","startView","StartView","startController","playerView","PlayerView","playerController","opponentView","OpponentView","opponentController","BoardView","StartController","PlayerController","OpponentController","Model"],"sourceRoot":""}